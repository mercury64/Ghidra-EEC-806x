
define endian=little;

define alignment=1;

define space RAM      type=ram_space      size=2  wordsize=1 default;
define space register type=register_space size=1;

################################################################
# Registers
################################################################
define register offset=0 size=4 [ PSW ];

define register offset=0 size=2 [ PC ];

define register offset=0x10 size=2 [ SP ];

# Special function registers (SFR)
define RAM offset=0x00 size=1
[
	ZRlo        ZRhi 
	LSOPort		BiDirPort
	AD_resultlo AD_resulthi
	MstrIOTmrlo	MstrIOTmrhi
	INT_MASK    INT_PEND
	IOStatus	InputSample
	HSI_Mask	HSI_Holding
	HSI_timelo  HSI_timehi
];

define RAM offset=0x00 size=2
[
	ZR  
	BiDirection      
	AD_result 
	MasterIOtmr 
	INTERRUPT 
	INPUT   
	HSI_Data    
	HSI_Time 
];

# Stack pointer
define RAM offset=0x10 size=1 [ StackPtrlo StackPtrhi];
define RAM offset=0x10 size=2 [ STACK ];

define register offset=0x30 size=1 [ I Z N V VT C NZ CZ ST ];	# status bits

################################################################
# Tokens
################################################################
# All instructions have a single-byte opcode except for a
# handful of multiplication/division instructions which have
# a two-byte op-code with the first byte as 'FE'
define token opbyte (8)
	op8     = (0,7)
	op6     = (2,7)
	op5     = (3,7)
	cond    = (0,3)
	op4     = (4,7)
	aa      = (0,1)
	bitno   = (0,2)
	highb   = (4,7)
	imm8    = (0,7) signed # immediate
	simm8   = (0,7) signed # immediate
	baop    = (0,7) # byte register
	breg8   = (0,7) # byte register
	dbreg8   = (0,7) # byte register
	waop    = (0,7) # word register
	wreg8   = (0,7) # word register
	dwreg16   = (0,7) # word register
	lreg32    = (0,7) # long/double register
	dlreg   = (0,7) # long/double register
	imm7    = (1,7)
	iwreg7  = (1,7)
	addbit8 = (0,0)
;

define token opword (16)
	imm16 = (0, 15)
	disp16 =  (0,15) signed
	op16   = (3,7)
	jmp11_hi = (0,2) signed #relative offset
	jmp11_lo = (8,15)
;

immed8:  imm8    is imm8 { export *[const]:1 imm8; }

simmed8: simm8  is simm8 { export *[const]:1 simm8; }

immed16: imm16  is imm16  { export *[const]:2 imm16; }

# baop8: baop  is baop & baop=0 { export 0:1; }
# baop8: baop  is baop & baop=1 { export 0:1; }
baop8: baop  is baop          { export *:1 baop; }

# waop16: waop  is waop & waop=0 { export 0:2; }
waop16: waop  is waop          { export *:2 waop; }

# iwreg: iwreg7  is iwreg7 & iwreg7=0 { export 0:2; }
iwreg: iwreg7  is iwreg7            { export iwreg7; }

# breg: breg8  is breg8 & breg8=0 { export 0:1; }
# breg: breg8  is breg8 & breg8=1 { export 0:1; }
breg: breg8  is breg8           { export *:1 breg8; }

dbreg: dbreg8 is dbreg8 		{ export *:1 dbreg8; }

# wreg: wreg8  is wreg8 & wreg8=0 { export 0:2; }
wreg: wreg8  is wreg8           { export *:2 wreg8; }

dwreg: dwreg16  is dwreg16      { export *:2 dwreg16; }

lreg: lreg32 is lreg32 { export *:4 lreg32; }

# See reference manual pp. 29-30 and note 1 on page 113
# 1-byte operands
oper8:   baop8                       is aa=0x0; baop8                       { export baop8; } #direct
oper8:   "#"immed8                   is aa=0x1; immed8                      { export immed8; } #immediate

oper8:   "["indirect_addr"]"                 is aa=0x2; iwreg7 & addbit8=0 [indirect_addr = iwreg7 << 1;] { 
	local tmp:2 = *indirect_addr:2;
	export *[RAM]:1 tmp; 
} #indirect

oper8:   "["indirect_addr"]+"                is aa=0x2; iwreg7 & addbit8=1  [indirect_addr = iwreg7 << 1;] {
	local tmp:2 = *indirect_addr:2;
	*indirect_addr:2 = tmp + 1;
	export *[RAM]:1 tmp;
} #indirect+
oper8:   simmed8"["indirect_addr"]"          is aa=0x3; iwreg7 & addbit8=0; simmed8 [indirect_addr = iwreg7 << 1;] {
	local tmp:2 = *indirect_addr:2;
	tmp = tmp + sext(simmed8);
	export *[RAM]:1 tmp;
} #indexed short
oper8:   immed16"["indirect_addr"]"  is aa=0x3; iwreg7 & addbit8=1; immed16 [indirect_addr = iwreg7 << 1;] {
	local tmp:2 = *indirect_addr:2;
	tmp = tmp + immed16;
	export *[RAM]:1 tmp;
} #indexed long

# 2-byte operands
oper16:  waop16                     is aa=0x0; waop16                      { export waop16; } #direct

oper16:  "#"immed16                 is aa=0x1; immed16                     { export immed16; } #immediate

oper16:  "["indirect_addr"]"        is aa=0x2; iwreg7 & addbit8=0 [indirect_addr = iwreg7 << 1;] { 
	local tmp:2 = *indirect_addr:2;
	export *[RAM]:2 tmp;
} #indirect

oper16:  "["indirect_addr"]+"        is aa=0x2; iwreg7 & addbit8=1 [indirect_addr = iwreg7 << 1;] { 
	local tmp:2 = *indirect_addr:2;
	*indirect_addr:2 = tmp + 2;
	export *[RAM]:2 tmp;
} #indirect +

oper16:  simmed8"["indirect_addr"]"         is aa=0x3; iwreg7 & addbit8=0; simmed8 [indirect_addr = iwreg7 << 1;] {
	local tmp:2 = *indirect_addr:2;
	tmp = tmp + sext(simmed8);
	export *[RAM]:2 tmp;
} #indexed short

oper16:  immed16"["indirect_addr"]"  is aa=0x3 ; iwreg7 & addbit8=1; immed16 [indirect_addr = iwreg7 << 1;] {
	local tmp:2 = *indirect_addr:2;
	tmp = tmp + immed16;
	export *[RAM]:2 tmp;
} #indexed long

# range -128 through +127
jmpdest: reloc    is simm8 [ reloc = inst_next + simm8; ]                              { export *:1 reloc; }

# range -1023 through 1024
jmpdest11: reloc  is jmp11_hi & jmp11_lo  [reloc = inst_next + ((jmp11_hi << 8) | jmp11_lo);]                                { export *:2 reloc; }
jmpdest16: reloc  is disp16 [reloc = inst_next + disp16;] { export *:2 reloc; }

################################################################
# Pseudo Instructions
################################################################
#define pcodeop blockMove;
define pcodeop idlePowerdown;
define pcodeop normalize;

################################################################
# Macros
################################################################
macro push(val) {
	SP = SP - 2;
	*:2 SP = val;
}

macro pop(val) {
	val = *:2 SP;
	SP = SP + 2;
}

macro resetFlags() {
	PSW = 0x7f00;
}

macro resultFlags(res) {
	Z = (res == 0);
	N = (res s< 0);
	C = 0;
	V = 0;
}

macro additionFlags(op1, op2, res) {
	Z = (res == 0);
	N = (res s< 0);
	C = carry(op1, op2);
	V = scarry(op1, op2);
	VT = V| VT;
}

macro subtractFlags(op1, op2, res) {
	N = (res s< 0);
	Z = (res == 0);
	C = (op1 < op2) == 0;
	V = sborrow(op1, op2);
	VT = VT | V;
}

macro stickyFlagW(source, shift) {
	local mask:2 = -1;
	mask = (mask >> (16 - shift + 1)) * zext(shift > 1);
	local result:2 = source & mask;

	ST = (result != 0);
}

macro stickyFlagB(source, shift) {
	local mask:1 = -1;
	mask = (mask >> (8 - shift + 1)) * (shift > 1);
	local result:1 = source & mask;

	ST = (result != 0);
}

macro stickyFlagL(source, shift) {
	local mask:4 = -1;
	mask = (mask >> (32 - shift + 1)) * zext(shift > 1);
	local result:4 = source & mask;

	ST = (result != 0);
}

macro blockMove(ptrs, cntreg) {
	local tsptr:4 = (ptrs & 0xffff0000) >> 0x10;
	local srcPtr:2 = tsptr(2);
	local dstPtr:2 = ptrs(2);
	local cnt = cntreg;
	<loop>
	local data:2 = *srcPtr;
	*dstPtr = data;
	srcPtr = srcPtr + 2;
	dstPtr = dstPtr + 2;
	cnt = cnt - 1;
	if cnt != 0 goto <loop>;
	ptrs = zext(dstPtr) | (zext(srcPtr) << 0x10);
}

macro setShiftLeftCarryFlag(shiftee,amount) {
	shifting:1 = amount != 0;
	local tmp = ((shiftee >> (16-amount)) & 1);
	C= (shifting & tmp:1);
}

macro setShiftRightCarryFlag(shiftee,amount) {
	shifting:1 = amount != 0;
	local tmp = (shiftee >> (amount-1)) & 1;
	C = (shifting & tmp:1);
}

macro setSignedShiftRightCarryFlag(shiftee,amount) {
	shifting:1 = amount != 0;
	local tmp = (shiftee s>> (amount-1)) & 1;
	C= (shifting & tmp:1);
}

################################################################
# Constructors
################################################################
# 2-op
:AD2W wreg, oper16                   is op6=0x19 ... & oper16; wreg {
	local tmpD = wreg + oper16;
	additionFlags(wreg, oper16, tmpD);
	wreg = tmpD;
}

# 3 op
:AD3W dwreg, wreg, oper16            is op6=0x11 ... & oper16; wreg; dwreg {
	local tmpD = wreg + oper16;
	dwreg = tmpD;
	additionFlags(wreg, oper16, tmpD);
}

# 2-op
:AD2B breg, oper8                   is op6=0x1d ... & oper8; breg {
	local tmp = breg + oper8;
	additionFlags(breg, oper8, tmp);
	breg = tmp;
}

:AD3B dbreg, breg, oper8            is op6=0x15 ... & oper8; breg; dbreg {
	local tmp = breg + oper8;
	dbreg = tmp;
	additionFlags(breg, oper8, tmp);
}

:ADCW wreg, oper16                  is op6=0x29 ... & oper16; wreg {
	local tmp = oper16 + zext(C);
	local res = wreg + tmp;
	local oldz = Z;
	additionFlags(wreg, tmp, res);
	Z = oldz & Z; # only cleared, not set
	wreg = res;
}

:ADCB breg, oper8                  is op6=0x2d ... & oper8; breg {
	local tmp = oper8 + C;
	local res =breg + tmp;
	local oldz = Z;
	additionFlags(breg, tmp, res);
	Z = oldz & Z; # only cleared, not set
	breg = res;
}

# 2-op
:AN2W wreg, oper16                   is op6=0x18 ... & oper16; wreg {
	wreg = wreg & oper16;
	resultFlags(wreg);
}

# 3-op
:AN3W dwreg, wreg, oper16            is op6=0x10 ... & oper16; wreg; dwreg {
	dwreg = wreg & oper16;
	resultFlags(dwreg);
}

:AN2B breg, oper8                   is op6=0x1c ... & oper8; breg {
	breg = breg & oper8;
	resultFlags(breg);
}

:AN3B dbreg, breg, oper8            is op6=0x14 ... & oper8; breg; dbreg {
	dbreg = breg & oper8;
	resultFlags(dbreg);
}

#:SKR4 lreg, wreg                    is op8=0xc1; wreg ; lreg {
#	blockMove(lreg, wreg);
#}

#:BMOVI lreg, wreg                   is op8=0xcd; wreg; lreg {
#	blockMove(lreg, wreg);
#}

#:DJNZ [ wreg ]                        is op8=0xe3; wreg {
##	goto [wreg];
#}

:CLRW wreg                           is op8=0x1; wreg {
	wreg = 0;
	Z = 1;
	N = 0;
	C = 0;
	V = 0;
}

:CLRB breg                          is op8=0x11; breg {
	breg = 0;
	Z = 1;
	N = 0;
	C = 0;
	V = 0;
}

:CLRC                               is op8=0xf8 {
	C = 0;
}

:CLRVT                              is op8=0xfc {
	VT = 0;
}

:CMPW wreg, oper16                   is op6=0x22 ... & oper16; wreg {
	op1:2 = oper16;
	tmp:2 = wreg - op1;
	subtractFlags(wreg, op1, tmp);
}

:CMPB breg, oper8                   is op6=0x26 ... & oper8; breg {
	op1:1 = oper8;
	tmp:1 = breg - op1;
	subtractFlags(breg, op1, tmp);
}

:CPLW wreg                           is op8 = 0x2; wreg {
	wreg = ~wreg;
	resultFlags(wreg);
}

:CPLB breg                          is op8=0x12; breg {
	breg = ~breg;
	resultFlags(breg);
}


:DECW wreg                           is op8=0x05; wreg {
	local tmp = wreg - 1;
	subtractFlags(wreg, 1, tmp);
	wreg = tmp;
}

:DECB breg                          is op8=0x15; breg {
	local tmp = breg - 1;
	subtractFlags(breg, 1, tmp);
	breg = tmp;
}

:DI                                 is op8=0xfa {
	I = 0;
}

:DIVU lreg, oper16                  is op6=0x23 ... & oper16; lreg {
	local num = lreg;
	local den = oper16;
	local div = num / zext(den);
	local rem = num % zext(den);
	lreg = zext(div:2 << 16) | rem;
	V = (div > 0xffff);
	VT = VT | V;
}

:DIVUB wreg, oper8                  is op6=0x27 ... & oper8; wreg {
	local num = wreg;
	local den = oper8;
	local div = num / zext(den);
	local rem = num % zext(den);
	wreg = zext(div:1 << 8) | rem;
	V = (div > 0xff);
	VT = VT | V;
}

:DJNZ breg, jmpdest                 is op8=0xe0; breg; jmpdest {
	breg = breg - 1;
	if (breg != 0) goto jmpdest;
}

@if defined(C196KB) || defined(C196KC)
:DJNZW wreg, jmpdest                is op8=0xe1; wreg; jmpdest {
	wreg = wreg - 1;
	if (wreg != 0) goto jmpdest;
}

@endif

:EI                                 is op8=0xfb {
	I = 1;
}

:EXT lreg                           is op8=0x6; lreg {
	tmp:4 = lreg & 0xffff;
	lreg = sext(tmp);
	resultFlags(lreg);
}

:EXTB wreg                          is op8=0x16; wreg {
	tmp:2 = wreg & 0xff;
	wreg = sext(tmp);
	resultFlags(wreg);
}

:INC wreg                           is op8=0x7; wreg {
	local tmp = wreg + 1;
	additionFlags(wreg, 1, tmp);
	wreg = tmp;
}

:INCB breg                          is op8=0x17; breg {
	local tmp:1 = breg + 1;
	additionFlags(breg, 1, tmp);
	breg = breg + 1;
}

@if defined(C196KB) || defined(C196KC)
:IDLPD "#"immed8                    is op8=0xf6; immed8 {
	idlePowerdown();
	Z = 0;
	N = 0;
	C = 0;
	V = 0;
	VT = 0;
	ST = 0;
}

@endif

:JBC breg, bitno, jmpdest           is op5=0x6 & bitno; breg; jmpdest {
	local bit = (breg >> bitno) & 0x1;
	if (bit == 0) goto jmpdest;
}

:JBS breg, bitno, jmpdest           is op5=0x7 & bitno; breg; jmpdest {
	local bit = (breg >> bitno) & 0x1;
	if (bit == 1) goto jmpdest;
}

cc: "NST"  is cond=0  { tmp:1 = (ST == 0); export tmp; }
cc: "NH"   is cond=1  { tmp:1 = ((C == 0) | (Z == 1)); export tmp; }
cc: "GT"   is cond=2  { tmp:1 = ((N == 0) & (Z == 0)); export tmp; }
cc: "NC"   is cond=3  { tmp:1 = (C == 0); export tmp; }
cc: "NVT"  is cond=4  { tmp:1 = (VT == 0); VT = 0; export tmp; }
cc: "NV"   is cond=5  { tmp:1 = (V == 0); export tmp; }
cc: "GE"   is cond=6  { tmp:1 = (N == 0); export tmp; }
cc: "NE"   is cond=7  { tmp:1 = (Z == 0); export tmp; }
cc: "ST"   is cond=8  { tmp:1 = (ST == 1); export tmp; }
cc: "H"    is cond=9  { tmp:1 = ((C == 1) & (Z == 0)); export tmp; }
cc: "LE"   is cond=10 { tmp:1 = ((N == 1) | (Z == 1)); export tmp; }
cc: "C"    is cond=11 { tmp:1 = (C == 1); export tmp; }
cc: "VT"   is cond=12 { tmp:1 = (VT == 1); VT = 0; export tmp; }
cc: "V"    is cond=13 { tmp:1 = (V== 1); export tmp; }
cc: "LT"   is cond=14 { tmp:1 = (N == 1); export tmp; }
cc: "E"    is cond=15 { tmp:1 = (Z == 1); export tmp; }

:J^cc jmpdest                       is op4=0xd & cc; jmpdest
{if (cc) goto jmpdest;}


:LCALL jmpdest16                    is op8=0xef; jmpdest16 {
	ret:2 = inst_next;
	push(ret);
	call jmpdest16;
} 

:LDW wreg, oper16                    is op6=0x28 ... & oper16; wreg {
	wreg = oper16;
}

:LDB breg, oper8                    is op6=0x2c ... & oper8; breg {
	breg = oper8;
}

:LDBSE wreg, oper8                  is op6=0x2f ... & oper8; wreg {
	wreg = sext(oper8);
}

:LDBZE wreg, oper8                  is op6=0x2b ... & oper8; wreg {
	wreg = zext(oper8);
}

:LJMP jmpdest16                     is op8=0xe7; jmpdest16 {
	goto jmpdest16;
}

# 2-op
:ML2W lreg, oper16                  is op6=0x1b ... & oper16; lreg {
	tmpD:4 = zext(lreg:2);
	tmpS:4 = zext(oper16);
	tmpD = tmpD * tmpS;
	lreg = tmpD;
}

# 3-op
:ML3W lreg, wreg, oper16            is op6=0x13 ... & oper16; wreg; lreg {
	tmpD:4 = zext(wreg);
	tmpS:4 = zext(oper16);
	tmpD = tmpD * tmpS;
	lreg = tmpD;
}

# 2-op
:ML2B wreg, oper8                  is op6=0x1f ... & oper8; wreg {
	tmpD:2 = zext(wreg:1);
	tmpS:2 = zext(oper8);
	tmpD = tmpD * tmpS;
	wreg = tmpD;
}

# 3-op
:ML3B wreg, breg, oper8            is op6=0x17 ... & oper8; breg; wreg {
	local tmpD:2 = zext(breg);
	local tmpS:2 = zext(oper8);
	tmpD = tmpD * tmpS;
	wreg = tmpD;
}

:NEG wreg                           is op8=0x03; wreg {
	local tmp:2 = -wreg;
	local zero:2 = 0;
	subtractFlags(zero, wreg, tmp);
	wreg = tmp;
}

:NEGB breg                          is op8=0x13; breg {
	local tmp:1 = -breg;
	local zero:1 = 0;
	subtractFlags(zero, breg, tmp);
	breg = tmp;
}

:NOP                                is op8=0xff {
	#resetFlags();
	#PC = 0x2080;
	#goto [PC];
}

:NORML lreg, breg                   is op8=0xf; breg; lreg {
	#The LONG-INTEGER operand is normalized; i.e., it is shifted to the left until its
	#most significant bit is 1. If the most significant bit is still 0 after 31 shifts, the
	#process stops and the zero flag is set. The number of shifts actually performed
	#is stored in the second operand.
	normalize(lreg, breg);
	Z = (lreg == 0);
	C = 0;
# $(N) is undefined
}

:OR wreg, oper16                    is op6=0x20 ... & oper16; wreg {
	tmpD:2 = wreg;
	tmpS:2 = oper16;
	tmpD = tmpD | tmpS;
	wreg = tmpD;
	resultFlags(wreg);
}

:ORB breg, oper8                    is op6=0x24 ... & oper8; breg {
	tmpD:1 = breg;
	tmpS:1 = oper8;
	tmpD = tmpD | tmpS;
	breg = tmpD;
	resultFlags(breg);
}

:POPW oper16                         is op6=0x33 ... & oper16 {
	local result:2 = 0;
	pop(result);
	oper16 = result;
}

:POPP                               is op8=0xf3 {
	local result:4 = 0;
	pop(result);
	PSW = result:2;
	local resultHi = result >> 8;
	INT_MASK = resultHi:1;
}

:PUSHP                              is op8=0xf2 {
	val:4 = (zext(INT_MASK) << 8) | zext(PSW);
	push(val);
	resetFlags();
}

:PUSHW oper16                        is op6=0x32 ... & oper16 {
	val:2 = oper16;
	push(val);
}

:RET                                is op8=0xf0 {
	local retDest:2 = 0;
	pop(retDest);
	return [retDest];
}

:RETI                                is op8=0xf1 {
	local retDest:2 = 0;
	pop(retDest);
	return [retDest];
}

:SCALL jmpdest11                    is op16=0x5 & jmpdest11 {
	ret:2 = inst_next;
	push(ret);
	call jmpdest11;
}

:SETC                               is op8=0xf9 {
	C = 1;
}

:SHLW wreg, "#"immed8                is op8=0x09; immed8 & (highb = 0x0); wreg {
	local source = wreg;
	local shift = immed8;
	setShiftLeftCarryFlag(source, shift);
	local res = source << shift;
	Z= (res == 0);
	V = 0;
	VT = VT | V;
	wreg = res;
}

:SHLW wreg, breg                     is op8=0x09; breg & (highb != 0x0); wreg {
	local source = wreg;
	local shift = breg;
	setShiftLeftCarryFlag(source, shift);
	local res = source << shift;
	Z = (res == 0);
	V = 0;
	VT = VT | V;
	wreg = res;
}

:SHLB dbreg, "#"immed8              is op8=0x19; immed8 & (highb = 0x0); dbreg {
	local source = dbreg;
	local shift = immed8;
	setShiftLeftCarryFlag(source, shift);
	local res = source << shift;
	Z= (res == 0);
	V = 0;
	VT = VT | V;
	dbreg = res;
}

:SHLB dbreg, breg                   is op8=0x19; breg & (highb != 0x0); dbreg {
	local source = dbreg;
	local shift = breg;
	setShiftLeftCarryFlag(source, shift);
	local res = source << shift;
	Z= (res == 0);
	V = 0;
	VT = VT | V;
	dbreg = res;
}

:SHLDW lreg, "#"immed8               is op8=0x0d; immed8 & (highb = 0x0); lreg {
	local source = lreg;
	local shift = immed8;
	setShiftLeftCarryFlag(source, shift);
	local res = source << shift;
	Z = (res == 0);
	V = 0;
	VT = VT | V;
	lreg = res;
}

:SHLDW lreg, breg                    is op8=0x0d; breg & (highb != 0x0); lreg {
	local source = lreg;
	local shift = breg;
	setShiftLeftCarryFlag(source, shift);
	local res = source << shift;
	Z = (res == 0);
	V = 0;
	VT = VT | V;
	lreg = res;
}

:SHRW wreg, "#"immed8                is op8=0x08; immed8 & (highb = 0x0); wreg {
	local source = wreg;
	local shift = immed8;
	ST = 0;
	setShiftRightCarryFlag(source, shift);
	local res = source >> shift;
	Z = (res == 0);
	N = 0;
	V = 0;
	wreg = res;
	stickyFlagW(source, shift);
}

:SHRW wreg, breg                     is op8=0x08; breg & (highb != 0x0); wreg {
	local source = wreg;
	local shift = breg;
	setShiftRightCarryFlag(source, shift);
	local res = source >> shift;
	Z = (res == 0);
	N = 0;
	V = 0;
	wreg = res;
	stickyFlagW(source, shift);
}

:SHRA wreg, "#"immed8               is op8=0x0a; immed8 & (highb = 0x0); wreg {
	local source = wreg;
	local shift = immed8;
	setSignedShiftRightCarryFlag(source, shift);
	local res = source s>> shift;
	Z = (res == 0);
	N = (res s< 0);
	V = 0;
	wreg = res;
	stickyFlagW(source, shift);
}

:SHRA wreg, breg                    is op8=0x0a; breg & (highb != 0x0); wreg {
	local source = wreg;
	local shift = breg;
	setSignedShiftRightCarryFlag(source, shift);
	local res = source s>> shift;
	Z= (res == 0);
	N = (res s< 0);
	V = 0;
	wreg = res;
	stickyFlagW(source, shift);
}

:SHRAB dbreg, "#"immed8             is op8=0x1a; immed8 & (highb = 0x0); dbreg {
	local source = dbreg;
	local shift = immed8;
	setSignedShiftRightCarryFlag(source, shift);
	local res = source s>> shift;
	Z = (res == 0);
	N = (res s< 0);
	V = 0;
	dbreg = res;
	stickyFlagB(source, shift);
}

:SHRAB dbreg, breg                  is op8=0x1a; breg & (highb != 0x0); dbreg {
	local source = dbreg;
	local shift = breg;
	setSignedShiftRightCarryFlag(source, shift);
	local res = source s>> shift;
	Z = (res == 0);
	N = (res s< 0);
	V = 0;
	dbreg = res;
	stickyFlagB(source, shift);
}

:SHRAL lreg, "#"immed8              is op8=0x0e; immed8 & (highb = 0x0); lreg {
	local source = lreg;
	local shift = immed8;
	setSignedShiftRightCarryFlag(source, shift);
	local res = source s>> shift;
	Z = (res == 0);
	N = (res s< 0);
	V = 0;
	lreg = res;
	stickyFlagL(source, shift);
}

:SHRAL lreg, breg                   is op8=0x0e; breg & (highb != 0x0); lreg {
	local source = lreg;
	local shift = breg;
	setSignedShiftRightCarryFlag(source, shift);
	local res = source s>> shift;
	Z = (res == 0);
	N= (res s< 0);
	V = 0;
	lreg = res;
	stickyFlagL(source, shift);
}

:SHRB dbreg, "#"immed8              is op8=0x18; immed8 & (highb = 0x0); dbreg {
	local source = dbreg;
	local shift = immed8;
	setShiftRightCarryFlag(source, shift);
	local res = source >> shift;
	Z = (res == 0);
	N = 0;
	V = 0;
	dbreg = res;
	stickyFlagB(source, shift);
}

:SHRB dbreg, breg                   is op8=0x18; breg & (highb != 0x0); dbreg {
	local source = dbreg;
	local shift = breg;
	setShiftRightCarryFlag(source, shift);
	local res = source >> shift;
	Z = (res == 0);
	N= 0;
	V = 0;
	dbreg = res;
	stickyFlagB(source, shift);
}

:SHRDW lreg, "#"immed8               is op8=0x0c; immed8 & (highb = 0x0); lreg {
	local source = lreg;
	local shift = immed8;
	setShiftRightCarryFlag(source, shift);
	local res = source >> shift;
	Z = (res == 0);
	N = 0;
	V= 0;
	lreg = res;
	stickyFlagL(source, shift);
}

:SHRDW lreg, breg                    is op8=0x0c; breg & (highb != 0x0); lreg {
	local source = lreg;
	local shift = breg;
	setShiftRightCarryFlag(source, shift);
	local res = source >> shift;
	Z = (res == 0);
	N = 0;
	V = 0;
	lreg = res;
	stickyFlagL(source, shift);
}

:SIGNDS 		                  is op8=0xfe {

}

:SJMP jmpdest11                     is op16=0x4 & jmpdest11 {
	goto jmpdest11;
}

:SKIP                               is op8=0x00 {
	local tmp:1 = 0;
	tmp = tmp; # avoid warning
} #2-byte NOP

:STW wreg, oper16                    is op6=0x30 ... & oper16; wreg {
	oper16 = wreg;
}

:STB breg, oper8                    is op6=0x31 ... & oper8; breg {
	oper8 = breg;
}

# 2-op
:SB2W wreg, oper16                   is op6=0x1a ... & oper16; wreg {
	local tmp = wreg - oper16;
	subtractFlags(wreg, oper16, tmp);
	wreg = tmp;
}

# 3 op
:SB3W dwreg, wreg, oper16            is op6=0x12 ... & oper16; wreg; dwreg {
	dwreg = wreg - oper16;
	subtractFlags(wreg, oper16, dwreg);
}

# 2-op
:SB2B breg, oper8                   is op6=0x1e ... & oper8; breg {
	local tmp = breg - oper8;
	subtractFlags(breg, oper8, tmp);
}

:SB3B dbreg, breg, oper8            is op6=0x16 ... & oper8; breg; dbreg {
	dbreg = breg - oper8;
	subtractFlags(breg, oper8, dbreg);
}

:SBBW wreg, oper16                  is op6=0x2a ... & oper16; wreg {
	local tmp = wreg - oper16 - zext(1 - C);
	local oldz = Z;
	subtractFlags(wreg, oper16-zext(1-C), tmp);
	wreg = tmp;
	Z = oldz & Z;
}

:SBBB breg, oper8                  is op6=0x2e ... & oper8; breg {
	local tmp = breg - oper8 - zext(1 - C);
	local oldz = Z;
	subtractFlags(breg, oper8-zext(1-C), tmp);
	breg = tmp;
	Z = oldz & Z;
}

#:INT                               is op8=0xf7 {
#	ret:2 = inst_next;
#	push(ret);
	#trapv:2 = 0x2010;
	#PC = *trapv;
	#goto [PC];
#}

:XOR wreg, oper16                   is op6=0x21 ... & oper16; wreg {
	tmpD:2 = wreg;
	tmpS:2 = oper16;
	tmpD = tmpD ^ tmpS;
	wreg = tmpD;
	resultFlags(wreg);
}

@if defined(8065)
:SKR4 wreg, waop16                   is op8=0x04; waop16; wreg {
	local tmp = wreg;
	wreg = waop16;
	waop16 = tmp;
}

:SKRC wreg, immed8", TABLE["iwreg"]" is op8=0x0b; iwreg & addbit8=0; immed8; wreg {
	local tmp = iwreg;
	tmp = tmp + sext(immed8);
	local val = *[RAM]:2 tmp;

	local wreg_tmp = wreg;
	wreg = val;
	*[RAM]:2 tmp = wreg_tmp;
}

:SKRC wreg, immed16", TABLE["iwreg"]"  is op8=0x0b; iwreg & addbit8=1; immed16; wreg {
	local tmp = iwreg;
	tmp = tmp + immed16;
	local val = *[RAM]:2 tmp;

	local wreg_tmp = wreg;
	wreg = val;
	*[RAM]:2 tmp = wreg_tmp;
}

@endif

@if defined(8065)

:XCHB breg, immed8", TABLE["iwreg"]"  is op8=0x1b ; iwreg & addbit8=0; immed8; breg {
	local tmp = iwreg;
	tmp = tmp + sext(immed8);
	local val = *[RAM]:1 tmp;

	local wreg_tmp = breg;
	breg = val;
	*[RAM]:1 tmp = wreg_tmp;
}

:SKRB breg, immed16", TABLE["iwreg"]"  is op8=0x1b ; iwreg & addbit8=1; immed16; breg {
	local tmp = iwreg;
	tmp = tmp + sext(immed16);
	local val = *[RAM]:1 tmp;

	local wreg_tmp = breg;
	breg = val;
	*[RAM]:1 tmp = wreg_tmp;
}

@endif

:XORB breg, oper8                   is op6=0x25 ... & oper8; breg {
	tmpD:1 = breg;
	tmpS:1 = oper8;
	tmpD = tmpD ^ tmpS;
	breg = tmpD;
	resultFlags(breg);
}



